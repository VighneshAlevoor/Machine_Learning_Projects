import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

#delimiter to convert csv to read tsv, and quoting =3 is to avoid double quotes
dataset = pd.read_csv('Restaurant_Reviews.tsv', delimiter='\t', quoting=3 )

#cleaning texts
import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
corpus=[]
for i in range(0,1000): 
    review = re.sub('[^a-zA-Z]',' ', dataset['Review'][i])
    review=review.lower()
    review = review.split()
    ps=PorterStemmer()
    review = [ps.stem(word ) for word in review if not word in set(stopwords.words('english'))]
    review = ' '.join(review)
    corpus.append(review)
    
#creating bag of words model (one column for each word and in rows we have all reviews)
# we can filter text in count vectorizer also, no need above steps but above cleaning manually gives more power to us , can manually make
from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(max_features = 1500)
x= cv.fit_transform(corpus).toarray()
y=dataset.iloc[:,1:].values

#Split data
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.20, random_state = 0)


#fitting bayes to dataset: no need to pick any parameter, random state picked so as to get same results during training
from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB
classifier.fit(x_train,y_train)

#predict
y_pred= classifier.predict(x_test)

#making confusion matrix
from sklearn.metrics import confusion_matrix
cm= confusion_matrix(y_test, y_pred)







